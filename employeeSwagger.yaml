openapi: 3.0.0
info:
  title: employee Data Fetch API
  description: This API can be used to perform fetch (GET), retrieve (POST), update(PUT) and delete (DELETE) operations on employee database.
  contact:
    name: ZopSmart
    url: https://zopsmart.com
  version: 1.0.0
servers:
  - url: http://localhost:8000
tags:
  - name: employee
    description: Details of employee
    
  - name: Department
    description: Access to Department
    
paths:
  /employee:
    
    
    post:
      tags:
       - employee
      description: sending employee data to the server to store in database
      requestBody:
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/Employee'
           
                
                 
      responses:
        '201':
          description: created
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/GetEmployee'
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'  
    get:
      tags:
       - employee
      description:  getting employee data
      operationId: getAll
      parameters:
        - name: empname
          in: query
          description: ID of order that needs to be fetched
          schema:
            type: string
            example: ravi
        - name: includeAll  
          in: query
          schema:
            type: boolean
            example: true
      
      responses:
        '200':
          description: success code
          content:  
           application/json:
              schema:
                $ref: '#/components/schemas/EmployeeAndDepartmentArray'
            
        '404':
          description: Not Found
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error404'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'              
           
   
   
      
  /department:        
    post:
      tags:
       - Department
      description: sending employee data to the server to store in database
      requestBody:
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/PostDepartment'
            
                
                 
      responses:
        '201':
          description: created
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/GetDepartment'
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'  
           
          
  /department/{id}:   
    delete:
      tags:
       - Department
      
      
      description: For valid response try uuid
      operationId: deleteEmployeeByDeptId
      parameters:
        - name: id
          in: path
          description: ID of the employee that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
          
        
        '404':
          description: Not found
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error404'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'    
    
    put:
      tags:
       - Department  
      
      description: Update an existing Department by DeptId
      operationId: updateDept
      parameters:
        - name: id
          in: path
          description: ID of the employee that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent Dept in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDepartment'
         
        required: true
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDepartment'          
           
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '404':
          description: Not Found
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error404'        
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'       
  /employee/{id}:         
    get:
      tags:
       - employee
      description: Here we get  data of employee with given query parameter from database 
     
      parameters:
        - name: id
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: string
            format: uuid 
           
           
      responses:
        '200':
          description: success code
          content:  
           application/json:
              schema:
                $ref: '#/components/schemas/EmployeeAndDepartment'
           
        '404':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error404'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'  
  
    put:
      tags:
       - employee
      
      description: Update an existing employee by Id
      operationId: updateEmp
      parameters:
        - name: id
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: string
            format: uuid 
      requestBody:
        description: Update an existent employee in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
         
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'          
           
        '404':
          description: Not found
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error404'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'  
  
    delete:
      tags:
       - employee
      
      
      description: For valid response try uuid
      operationId: deleteEmployee
      parameters:
        - name: id
          in: path
          description: ID of the employee that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
          
        
        '404':
          description: Not Found
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error404'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'  
  
           
components:
  schemas:
    Employee:
      type: object
      properties:
        
        name:
          type: string
          example: ravi
        dob:
          type: string
          example: dd-mm-yyyy
        city:
          type: string
          description: these cities needed only
          example: Banglore
          enum:
            - Banglore
            - Kochi
            - Mysore
              
        major:
          type: string
          description: type of measure
          example: CSE
          enum:
            - CSE
            - MCA
            - MBA
            - CA
            - B.COM
            
        deptId:
          type: integer
          example: 12
    GetEmployee:
      type: object
      properties:
        id: 
         type: string
         format: uuid
         example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: ravi
        dob:
          type: string
          example: dd-mm-yyyy
        city:
          type: string
          description: these cities needed only
          example: Banglore
          enum:
            - Banglore
            - Kochi
            - Mysore
              
        major:
          type: string
          description: type of measure
          example: CSE
          enum:
            - CSE
            - MCA
            - MBA
            - CA
            - B.COM
            
        deptId:
          type: integer
          example: 12      
           
    PostDepartment:
      type: object
      properties:
          
          name:
            type: string
            description: these are department name
            example: HR
            enum:
            - HR
            - TECH
            - ACCOUNTS
          floor:
            type: integer
            example: 2
    GetDepartment:
      type: object
      properties:
          id:
            type: integer
            example: 2345
          name:
            type: string
            description: these are department name
            example: HR
            enum:
            - HR
            - TECH
            - ACCOUNTS
          floor:
            type: integer
            example: 2        
    EmployeeAndDepartment: 
        type: object
        properties:
         id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
         name:
          type: string
          example: jason
         dob:
          type: string
          example: dd-mm-yyyy
         city:
          type: string
          description: these cities are only allowed
          example: Banglore
          enum:
            - Banglore
            - Kochi
            - Mysore
              
         major:
          type: string
          description: type of majors
          example: CSE
          enum:
            - CSE
            - MCA
            - MBA
            - CA
            - B.COM
         department:  
           $ref: '#/components/schemas/GetDepartment'
    EmployeeAndDepartmentArray: 
      type: array
      items:
        type: object
        properties:
         id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
         name:
          type: string
          example: jason
         dob:
          type: string
          example: dd-mm-yyyy
         city:
          type: string
          description: these cities are only allowed
          example: Banglore
          enum:
            - Banglore
            - Kochi
            - Mysore
              
         major:
          type: string
          description: type of majors
          example: CSE
          enum:
            - CSE
            - MCA
            - MBA
            - CA
            - B.COM
         department:  
           $ref: '#/components/schemas/GetDepartment'       
        
    error400:
        type: object
        properties:
         statusCode: 
          type: integer
          example: 400
         error:
          type: string
          example: data is not in valid format
    error404:
        type: object
        properties:
         statusCode: 
          type: integer
          example: 404
         error:
          type: string
          example: data is not found     
    error500:
        type: object
        properties:
         statusCode: 
          type: integer
          example: 500
         error:
          type: string
          example: internal server error
