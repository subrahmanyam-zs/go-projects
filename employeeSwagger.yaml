openapi: 3.0.3
info:
  title: API for employee DB
  description: | 
    This API can be used to perform fetch (GET), retrieve (POST), update(PUT) and delete (DELETE) operations on employee database.
    
  contact:
    name: ZopSmart
    url: https://zopsmart.com
  version: 1.0.0
servers:
  - url: https://localhost:8000
tags:
  - name: employee
    description: Details of employee
    
  - name: department
    description: Access to department 
    
paths:
<<<<<<< HEAD
  /employee/{id}:
=======
  /employee/{uId}:
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
    put:
      tags:
        - employee
      summary: Update an existing employee
      description: Update an existing employee by Id
      operationId: updateId
      parameters:
<<<<<<< HEAD
        - name: id
=======
        - name: uId
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
          in: path
          description: ID of employee to be  updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent employee in the db
        content:
          application/json:
            schema:
              type: object
              properties:
<<<<<<< HEAD
=======
                  uuid:
                    type: string
                    example: "705e4dcb-3ecd-24f3-3a35-3e926e4bded5"
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
                  empName:
                    type: string
                    example: "jason"
                  dob:
                    type: string
                    example: "12-06-2002"
                  city:
                    type: string
                    example: "Banglore"
                  majors:
                    type: string
                    example: "CSE"
                  dId:
                    type: integer
                    example: 2
                  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
<<<<<<< HEAD
                  id:
=======
                  uuid:
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
                    type: string
                    example: "705e4dcb-3ecd-24f3-3a35-3e926e4bded5"
                  empName:
                    type: string
                    example: "jason"
                  dob:
                    type: string
                    example: "12-06-2002"
                  city:
                    type: string
                    example: "Banglore"
                  majors:
                    type: string
                    example: "CSE"
                  dId:
                    type: integer
                    example: 2
<<<<<<< HEAD
        
        
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'  
          
    get:
      tags:
        - employee
      summary: Finds Employee
      description: Retrieve information of employee using uID
      operationId: empUId
      parameters:
        - name: id
          in: path
          
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/employee'          
            
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'
          
    
    delete:
      tags:
        - employee
      summary: Deletes an employee
      description: delete an emplyee by using given uid
      operationId: employeeid
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: sucessfully deleted
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error200'
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'
=======
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe

            
            
            
  /department/{id}:
    put:
      tags:
        - department
      summary: Update  department information
<<<<<<< HEAD
      description: Update department information  by id
      operationId: updateid
=======
      description: Update department information  by dId
      operationId: updatedId
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent department in the db
        content:
          application/json:
            schema:
             type: object
             properties: 
<<<<<<< HEAD
=======
                  dId:
                    type: integer
                    example: 2
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
                  deptName: 
                    type: string
                    example: "tech"
                  floorNo:
                    type: integer
                    example: 1
                  
      responses:
        
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties: 
                  dId:
                    type: integer
                    example: 2
                  deptName: 
                    type: string
                    example: "tech"
                  floorNo:
                    type: integer
                    example: 1
<<<<<<< HEAD
        
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'
=======
        '400':
          description: Invalid ID supplied
        '404':
          description: Department Id not found
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
       
            
            
    delete:
      tags:
        - department
      summary: Deletes a department
      description: delete a corresponding row based on the dId given
<<<<<<< HEAD
      operationId: deleteid
=======
      operationId: deletedId
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
      parameters:
        - name: id
          in: path
          description: Department id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: sucessfully deleted
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error200'
        '400':
<<<<<<< HEAD
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'
=======
          description: Invalid department id
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
     
            
  /employee:          
    post:
      tags:
        - employee
      summary: Add a new employee 
      description: Add a new employee to the db
      operationId: empUID
      requestBody:
        description: Create a new employee in the db
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/employee'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/employee'          
            application/xml:
              schema:
                $ref: '#/components/schemas/employee'
<<<<<<< HEAD
       
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'
=======
        '405':
          description: Invalid uid
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe

            
  
  /department:          
    post:
      tags:
        - department
      summary: Add a new department
      description: Add a new department to the db
      operationId: dId
      requestBody:
        description: Create a new department in the db
        content:
          application/json:
            schema:
<<<<<<< HEAD
              $ref: '#/components/schemas/department'
          application/xml:
            schema:
              $ref: '#/components/schemas/department'
=======
              $ref: '#/components/schemas/employee'
          application/xml:
            schema:
              $ref: '#/components/schemas/employee'
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
<<<<<<< HEAD
                $ref: '#/components/schemas/department'          
            application/xml:
              schema:
                $ref: '#/components/schemas/department'
        
        '400':
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'
    
=======
                $ref: '#/components/schemas/employee'          
            application/xml:
              schema:
                $ref: '#/components/schemas/employee'
        '405':
          description: Invalid input
    
            
            
            
  /employee/{Id}:
    get:
      tags:
        - employee
      summary: Finds Employee
      description: Retrieve information of employee using uID
      operationId: empUId
      parameters:
        - name: Id
          in: path
          
          required: true
          schema:
            type: string
            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/employee'          
            
        '400':
          description: Invalid uID given as input
      
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
            
      
            
<<<<<<< HEAD
  /employee/:
    get:
      tags:
        - employee
      summary: Retrieves all the employees and department details 
      description: It retrieves all the employees and department details from the employees
      operationId: findAll
      parameters:
        - name: name 
          in: query
          description: getting the details of the employee by filtering with name
          schema:
            type: string
        - name: includeDepartment
          in: query
          description: if includeDepartment  is true then department details are also displayed
          schema:
            type: boolean 
=======
    delete:
      tags:
        - employee
      summary: Deletes an employee
      description: delete an emplyee by using given uid
      operationId: employeeid
      parameters:
        - name: Id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid employee id
      
            
  /employee/::
    get:
      tags:
        - employee
      summary: Retrieve all the employees
      description: It retrieves all the employees data in the db
      operationId: findemployees
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
      responses:
        '200':
          description: successfully retrieved
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/employee'          
        '400':
<<<<<<< HEAD
          description: Bad Request
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error400'
        '500':   
          description: internal server error
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/error500'
=======
          description: No data in the db
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
 
   
components:
  schemas:
    employee:
      type: object
      properties:
<<<<<<< HEAD
        id:
=======
        uid:
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
          type: string
          example: "705e4dcb-3ecd-24f3-3a35-3e926e4bded5"
        empName:
          type: string
          example: "jason"
        dob:
          type: string
          example: "12-06-2002"
        city:
          type: string
          example: "Bangalore"
          enum:
            - Banaglore
            - Kochi
            - Mysore
        majors:
          type: string
          description: Degree of the employee
          example: "CSE"
          enum:
            - CSE
            - MBA
            - MCA
            - CA
            - B.COM
<<<<<<< HEAD
        dId:
          type: integer
          description: Department ID of the employee 
        
    department:
      type: object
      properties:
        id:
          type: integer
          example: 2
        dName:
          type: string
          example: "tech"
          enum:
            - Tech
            - HR
            - Accounts
        floorNo:
          type: integer
          example: 1
    error400:
        type: object
        properties:
         statusCode: 
          type: integer
          example: 400
         error:
          type: string
          example: data is not in valid format
    error500:
        type: object
        properties:
         statusCode: 
          type: integer
          example: 500
         error:
          type: string
          example: internal server error  
    error200:
        type: object
        properties:
         statusCode: 
          type: integer
          example: 200
         error:
          type: string
          example: deleted
=======
>>>>>>> 50ee040905d85d5b044dce97c16c405c19483efe
