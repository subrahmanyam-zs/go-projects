// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package datastore is a generated GoMock package.
package datastore

import (
	reflect "reflect"

	entities "developer.zopsmart.com/go/gofr/Emp-Dept/entities"
	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockEmployee is a mock of Employee interface.
type MockEmployee struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeMockRecorder
}

// MockEmployeeMockRecorder is the mock recorder for MockEmployee.
type MockEmployeeMockRecorder struct {
	mock *MockEmployee
}

// NewMockEmployee creates a new mock instance.
func NewMockEmployee(ctrl *gomock.Controller) *MockEmployee {
	mock := &MockEmployee{ctrl: ctrl}
	mock.recorder = &MockEmployeeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployee) EXPECT() *MockEmployeeMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEmployee) Delete(ctx *gofr.Context, id uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployee)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockEmployee) Get(ctx *gofr.Context, id uuid.UUID) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeeMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployee)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockEmployee) GetAll(ctx *gofr.Context, name string, includeDept bool) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, name, includeDept)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEmployeeMockRecorder) GetAll(ctx, name, includeDept interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEmployee)(nil).GetAll), ctx, name, includeDept)
}

// GetDepartment mocks base method.
func (m *MockEmployee) GetDepartment(ctx *gofr.Context, id int) (entities.Department, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartment", ctx, id)
	ret0, _ := ret[0].(entities.Department)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartment indicates an expected call of GetDepartment.
func (mr *MockEmployeeMockRecorder) GetDepartment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartment", reflect.TypeOf((*MockEmployee)(nil).GetDepartment), ctx, id)
}

// Post mocks base method.
func (m *MockEmployee) Post(ctx *gofr.Context, emp entities.Employee) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, emp)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockEmployeeMockRecorder) Post(ctx, emp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockEmployee)(nil).Post), ctx, emp)
}

// Put mocks base method.
func (m *MockEmployee) Put(ctx *gofr.Context, id uuid.UUID, emp entities.Employee) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, id, emp)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockEmployeeMockRecorder) Put(ctx, id, emp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockEmployee)(nil).Put), ctx, id, emp)
}

// MockDepartment is a mock of Department interface.
type MockDepartment struct {
	ctrl     *gomock.Controller
	recorder *MockDepartmentMockRecorder
}

// MockDepartmentMockRecorder is the mock recorder for MockDepartment.
type MockDepartmentMockRecorder struct {
	mock *MockDepartment
}

// NewMockDepartment creates a new mock instance.
func NewMockDepartment(ctrl *gomock.Controller) *MockDepartment {
	mock := &MockDepartment{ctrl: ctrl}
	mock.recorder = &MockDepartmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepartment) EXPECT() *MockDepartmentMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDepartment) Delete(ctx *gofr.Context, id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDepartmentMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDepartment)(nil).Delete), ctx, id)
}

// Post mocks base method.
func (m *MockDepartment) Post(ctx *gofr.Context, dept entities.Department) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, dept)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockDepartmentMockRecorder) Post(ctx, dept interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockDepartment)(nil).Post), ctx, dept)
}

// Put mocks base method.
func (m *MockDepartment) Put(ctx *gofr.Context, id int, dept entities.Department) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, id, dept)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockDepartmentMockRecorder) Put(ctx, id, dept interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockDepartment)(nil).Put), ctx, id, dept)
}
